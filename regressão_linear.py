# -*- coding: utf-8 -*-
"""Regressão Linear.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1eLYEd0Lv1MHtzP7kozYQwYY7TAOgraYX
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn import metrics

# Carregar os dados
df = pd.read_csv('salary_data.csv')

# Selecionar features e target
features = df[['wage_span', 'median_salary', 'average_salary', 'lowest_salary']]
target = df['highest_salary']

# Converter a coluna 'wage_span' para códigos (números)
features['wage_span'] = features['wage_span'].astype('category').cat.codes

# Dividir os dados em conjunto de treinamento e teste
X_train, X_test, y_train, y_test = train_test_split(features, target, test_size=0.2, random_state=0)

# Criar o modelo de regressão linear
model = LinearRegression()

# Treinar o modelo
model.fit(X_train, y_train)

# Fazer previsões no conjunto de teste
predictions = model.predict(X_test)

# Calcular e imprimir as métricas de erro
print('Mean Absolute Error:', metrics.mean_absolute_error(y_test, predictions))
print('Mean Squared Error:', metrics.mean_squared_error(y_test, predictions))
print('Root Mean Squared Error:', np.sqrt(metrics.mean_squared_error(y_test, predictions)))

# Calcular o coeficiente de determinação (R^2)
r2 = metrics.r2_score(y_test, predictions)
print('R-squared (R2):', r2)

# Interpretar o desempenho do modelo com base no R2
if r2 >= 0.7:
    print('O modelo tem um bom desempenho, explicando uma variabilidade substancial nos dados.')
elif 0.5 <= r2 < 0.7:
    print('O modelo tem um desempenho moderado, explicando uma parte razoável da variabilidade nos dados.')
else:
    print('O modelo tem um desempenho limitado, explicando uma pequena parte da variabilidade nos dados.')

# Exibir os coeficientes do modelo
coefficients = pd.DataFrame({'Feature': features.columns, 'Coefficient': model.coef_})
print('\nCoefficients:')
print(coefficients)

# Exibir o termo independente (intercept) do modelo
print('\nIntercept:', model.intercept_)

# Adicionar o gráfico de reta de regressão
plt.scatter(y_test, predictions)
plt.xlabel('Valores Reais (y_test)')
plt.ylabel('Previsões (predictions)')
plt.title('Gráfico de Reta de Regressão')
plt.plot([min(y_test), max(y_test)], [min(y_test), max(y_test)], linestyle='--', color='red', linewidth=2)  # Linha diagonal
plt.show()